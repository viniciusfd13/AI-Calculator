import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from '@/components/ui/tooltip';
import { Slider } from '@/components/ui/slider';
import { Input } from '@/components/ui/input';
import { Info, Download, TrendingUp, Clock, DollarSign, Users, Upload, X } from 'lucide-react';

const ROICalculator = () => {
  const [data, setData] = useState({
    companyName: '',
    projectName: '',
    contactName: '',
    contactEmail: '',
    employees: 10,
    hourlyRate: 50,
    hoursPerWeek: 40,
    timeSaving: 20,
    cost: 10000
  });

  const [logo, setLogo] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);

  const handleLogoChange = (event) => {
    const file = event.target.files[0];
    if (file && file.type.startsWith('image/')) {
      setLogo(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrl(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const removeLogo = () => {
    setLogo(null);
    setPreviewUrl(null);
  };

  const calculateResults = () => {
    const annualHours = data.hoursPerWeek * 52;
    const hoursSaved = (annualHours * data.timeSaving / 100) * data.employees;
    const annualSavings = hoursSaved * data.hourlyRate;
    const monthlySavings = annualSavings / 12;
    const roi = ((annualSavings - data.cost) / data.cost * 100);
    const paybackMonths = (data.cost / monthlySavings);
    
    return {
      hoursSaved: Math.round(hoursSaved),
      annualSavings: Math.round(annualSavings),
      monthlySavings: Math.round(monthlySavings),
      roi: roi.toFixed(1),
      paybackPeriod: paybackMonths.toFixed(1)
    };
  };

  const results = calculateResults();

  const generatePDF = () => {
    // Note: This would need to be implemented in the actual application
    if (!data.contactEmail || !data.contactName) {
      alert('Please provide contact information to generate the PDF report');
      return;
    }
    // PDF generation logic with logo and contact info
  };

  const InfoTooltip = ({ content }) => (
    <Tooltip>
      <TooltipTrigger asChild>
        <Info className="h-4 w-4 ml-2 inline text-gray-400 hover:text-gray-600 cursor-help" />
      </TooltipTrigger>
      <TooltipContent>
        <p className="text-sm">{content}</p>
      </TooltipContent>
    </Tooltip>
  );

  const ResultCard = ({ icon: Icon, label, value, tooltip }) => (
    <Card className="bg-white">
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Icon className="h-5 w-5 text-blue-500" />
            <span className="text-sm text-gray-500">{label}</span>
            {tooltip && <InfoTooltip content={tooltip} />}
          </div>
          <span className="text-2xl font-bold text-gray-900">{value}</span>
        </div>
      </CardContent>
    </Card>
  );

  return (
    <TooltipProvider>
      <div className="max-w-6xl mx-auto p-6">
        <Card className="bg-white shadow-lg">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-2xl font-bold text-gray-900">AI ROI Calculator</CardTitle>
                <CardDescription className="text-gray-500">
                  Calculate the return on investment for your AI implementation
                </CardDescription>
              </div>
              <span className="text-sm text-gray-500">{new Date().toLocaleDateString()}</span>
            </div>
          </CardHeader>

          <CardContent className="space-y-8">
            {/* Company & Contact Information */}
            <div className="bg-gray-50 p-6 rounded-lg">
              <h3 className="text-lg font-semibold mb-4">Company & Contact Information</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">Company Name</label>
                    <Input 
                      value={data.companyName}
                      onChange={(e) => setData({ ...data, companyName: e.target.value })}
                      placeholder="Enter company name"
                      className="w-full"
                    />
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">Project Name</label>
                    <Input 
                      value={data.projectName}
                      onChange={(e) => setData({ ...data, projectName: e.target.value })}
                      placeholder="Enter project name"
                      className="w-full"
                    />
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">Contact Name</label>
                    <Input 
                      value={data.contactName}
                      onChange={(e) => setData({ ...data, contactName: e.target.value })}
                      placeholder="Enter your name"
                      className="w-full"
                    />
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700">Contact Email</label>
                    <Input 
                      type="email"
                      value={data.contactEmail}
                      onChange={(e) => setData({ ...data, contactEmail: e.target.value })}
                      placeholder="Enter your email"
                      className="w-full"
                    />
                  </div>
                </div>

                {/* Logo Upload */}
                <div className="md:col-span-2">
                  <label className="text-sm font-medium text-gray-700">Company Logo</label>
                  <div className="mt-2 flex items-center space-x-4">
                    {previewUrl ? (
                      <div className="relative">
                        <img 
                          src={previewUrl} 
                          alt="Company logo" 
                          className="h-16 w-16 object-contain rounded border border-gray-200"
                        />
                        <button
                          onClick={removeLogo}
                          className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                    ) : (
                      <label className="flex flex-col items-center justify-center w-16 h-16 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer hover:bg-gray-50">
                        <div className="flex flex-col items-center justify-center pt-5 pb-6">
                          <Upload className="h-6 w-6 text-gray-400" />
                        </div>
                        <input 
                          type="file" 
                          className="hidden" 
                          accept="image/*"
                          onChange={handleLogoChange}
                        />
                      </label>
                    )}
                    <span className="text-sm text-gray-500">
                      {previewUrl ? "Click the X to remove logo" : "Upload company logo"}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Input Parameters and Results Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Input Parameters */}
              <div className="space-y-6">
                <h3 className="text-lg font-semibold">Input Parameters</h3>
                
                <div className="space-y-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700 flex items-center">
                      Number of Employees
                      <InfoTooltip content="Total number of employees affected by the AI implementation" />
                    </label>
                    <Input 
                      type="number"
                      value={data.employees}
                      onChange={(e) => setData({ ...data, employees: Number(e.target.value) || 0 })}
                      min="1"
                      className="w-full"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700 flex items-center">
                      Hourly Rate ($)
                      <InfoTooltip content="Average hourly rate per employee" />
                    </label>
                    <Input 
                      type="number"
                      value={data.hourlyRate}
                      onChange={(e) => setData({ ...data, hourlyRate: Number(e.target.value) || 0 })}
                      min="0"
                      className="w-full"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700 flex items-center">
                      Hours per Week
                      <InfoTooltip content="Average working hours per week per employee" />
                    </label>
                    <Input 
                      type="number"
                      value={data.hoursPerWeek}
                      onChange={(e) => setData({ ...data, hoursPerWeek: Number(e.target.value) || 0 })}
                      min="1"
                      max="168"
                      className="w-full"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700 flex items-center">
                      Time Saving (%)
                      <InfoTooltip content="Expected percentage of time saved through AI implementation" />
                    </label>
                    <Slider
                      value={[data.timeSaving]}
                      onValueChange={(value) => setData({ ...data, timeSaving: value[0] })}
                      max={100}
                      step={1}
                      className="w-full"
                    />
                    <span className="text-sm text-gray-500">{data.timeSaving}%</span>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700 flex items-center">
                      Implementation Cost ($)
                      <InfoTooltip content="Total cost of AI implementation including software, training, and setup" />
                    </label>
                    <Input 
                      type="number"
                      value={data.cost}
                      onChange={(e) => setData({ ...data, cost: Number(e.target.value) || 0 })}
                      min="0"
                      className="w-full"
                    />
                  </div>
                </div>
              </div>

              {/* Results */}
              <div className="space-y-6">
                <h3 className="text-lg font-semibold">Results</h3>
                <div className="grid gap-4">
                  <ResultCard 
                    icon={Clock}
                    label="Hours Saved per Year"
                    value={`${results.hoursSaved.toLocaleString()} hours`}
                    tooltip="Total work hours saved annually across all employees"
                  />
                  <ResultCard 
                    icon={DollarSign}
                    label="Monthly Savings"
                    value={`$${results.monthlySavings.toLocaleString()}`}
                    tooltip="Expected monthly cost savings based on time saved"
                  />
                  <ResultCard 
                    icon={DollarSign}
                    label="Annual Savings"
                    value={`$${results.annualSavings.toLocaleString()}`}
                    tooltip="Expected annual cost savings based on time saved"
                  />
                  <ResultCard 
                    icon={TrendingUp}
                    label="ROI"
                    value={`${results.roi}%`}
                    tooltip="Return on Investment percentage"
                  />
                  <ResultCard 
                    icon={Clock}
                    label="Payback Period"
                    value={`${results.paybackPeriod} months`}
                    tooltip="Time required to recover the implementation cost"
                  />

                  <button
                    onClick={generatePDF}
                    className="flex items-center justify-center gap-2 w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    <Download className="h-5 w-5" />
                    Download PDF Report
                  </button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </TooltipProvider>
  );
};

export default ROICalculator;
